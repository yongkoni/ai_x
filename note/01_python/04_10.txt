2장 자료형과 연산자

5절 연산자
	산술연산자 : +, -, *, /, //(몫), %(나머지), **(제곱)
	할당연산자 : =, +=, -=, *=, /=, //=, %=
	논리연산자 : &, and, |, or, not
	비교연산자 : >, >=, <, <=, ==(같다), !=(다르다)
		    비교연산자의 우선순위는 논리연산의 우선순위보다 낮다
	비트연산자 ; &, |, ^(XOR), ~
		    &와 |은 비교연산자보다 우선순위가 높다

6절 문자열 다루기
	문자열 슬라이싱 변수[from:stop:step]
	len(문자열변수) : 문자갯수
	upper() : 대문자로
	lower() : 소문자로
	title() : 각 어절의 첫글자만 대문자로
	capitalize() : 첫문자만 대문자로
	count('찾을문자열') : '찾을문자열'이 몇개 들어있는지 갯수 변환
	find('찾을문자열') : '찾을문자열'이 왼쪽부터 시작하여 몇번째 인덱스에 있는지 인덱스를 반환
	rfind('찾을문자열') : '찾을문자열'이 오른쪽부터 시작하여 몇번째 인덱스에 있는지 인덱스를 반환
 		 **찾을문자열이 없으면 -1을 반환**
		cf) index('찾을문자열') : 찾을문자열의 인덱스를 반환, 찾을문자열이 없으면 오류 => 오류가 날 수도 있으므로 거의 안씀
	startswith('특정문자열') : 특정문자열로 시작하는지 여부
	endswith('특정문자열') : 특정문자열로 끝나는지 여부
	strip() : 좌우 공백 제거
	rstrip() : 오른쪽 공백 제거
	lstrip() : 왼쪽 공백 제거
	isdigit() : 숫자문자열인지 여부
	islower() : 소문자문자열인지 여부
	isupper() : 대문자문자열인지 여부
	replace(oldStr, newStr) : oldStr을 newStr로 변경
	split(구분자) : 구분자를 이용해 문자 분리(리스트 반환)
	join(리스트) : 리스트를 연결
