3장 데이터 구조

1절 리스트
	정렬하기
		lst.sort() : lst 자체가 정렬한 결과로 바뀜 (기본정렬 : 오름차순)
		lst.sort(reverse = True) : 내림차순
		lst.reverse() : lst 자체가 역순으로 변경
	복제하기
		스칼라 데이터 복제
		리스트(배열, 데이터프레임, 딕셔너리)의 복제
		얕은 복사(할당) : new_lst = lst          ※ 복제본주소 == 원본주소
		깊은 복사(복제) : new_lst = lst.copy()  ※ 복제본주소 != 원본주소
	추가 : lst.append(value), lst.insert(idx, value), lst.extend(anthoer_lst)
	삭제 : lst.pop(), lst.pop(idx), lst.remove(data)
	찾기 : lst.index(data), lst.count(data)
	정렬 : lst.sort(reverse=True)
	역순 : lst.reverse()

2절 튜플
	tup = (data)
	리스트와 유사하지만 읽기전용, 수정이 필요없는 데이터에서 사용
	수정불가하므로 튜플에 데이터 수정, 추가, 삭제 불가 (제공되는 함수도 많지 않음)
	().tuple() 이용해서 생성
	data in tup : tup안의 data 요소가 있는지 여부

3절 딕셔너리
	dic = {key1:value1, key2:value2, ...}
	중괄호를 ({})를 이용해서, 키(key)-값(value) 쌍으로 구성된 자료구조
	키는 중복불가 (유일한 값), 키에 list는 사용불가, 값은 중복가능
	인덱스를 이용한 참조 지원 안 함
	읽기 : dic[key1], 	dic.get(key1)
	수정 : dic[key1] = 수정할 데이터
	제거 : del dic[key1], dic.pop(key1)
	추가 : dic[key9] = value9
	dic.keys() / dic.values() / dic.items()

4절 셋
	중복을 허용하지 않는 집합 (순서없음 == 인덱스없음)
	중괄호({})나 set()함수를 이용해서 셋 생성
	추가 : add(스칼라데이터), update(데이터구조)
		add() : 기본자료형, 튜플데이터를 하나의 요소로 추가할 경우
		update() : 리스트, 튜플, 딕셔너리, 셋 요소 하나하나씩 추가할 경우 (dict 사용시 key만 추가)
	집합연산자 : &, |, -
	삭제 : remove()
	연산 : &(합집합), |(교집합), -(차집합)
		※ &, | : 집합연산자, 논리연산자, 비트연산자

5절 enumerate
	반복자 또는 순서 객체로 반복문을 처리할 때 사용함수
	enumerate(iter) 이라고 사용했을 경우 이 함수는 iter 객체를 (0,iter[0]), (1, iter[1]), ... 이런 형식으로 반환
	리스트, 튜플, 셋, 딕셔너리를 for문에 사용
