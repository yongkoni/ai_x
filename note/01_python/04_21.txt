7장 객체 지향 프로그래밍

요약
객체를 이용하면 객체에 정보를 저장하고, 그 정보를 이용해서 어떤 기능을 수행할 수 있다
객체 = 데이터(변수:객체마다 고유의 값) + 기능(메소드, 함수)
그 객체를 만들기 위한 틀 => 클래스

    class 클래스 명 :
        '독스트링'
        클래스변수명 = 값
        def __init__(self, [객체멤버를 초기화할 변수 = 값, ...]) :
            self.인스턴스(일반)변수 = 값
            객체를 생성할 때 객체 멤버변수의 초기화
        
        def method(self) :
            인스턴스 메소드(일반함수)의 개개변수는 self를 반드시 포함
            
        @class method
        def classmethod(cls) :
            코드
        
        @staticmethod
        def staticmethod() :
            코드
    
    객체 = 클래스명()
    객체변수.method()
    클래스명.classmethod()
    클래스명.staticmethod()

4절 상속과 재정의
	클래스를 재사용
	상속을 이용하면 부모클래스의 모든 속성을 자식클래스로 물려줄 수 있음
	문법 : class 자식클래스명(부모클래스명):
	정적변수(static 변수) : 여러 객체들 사이에 데이터를 공유하고 싶을 때 사용
		static 변수 앞에 under score 2개(__)를 붙이면 클래스명.클래스명__static변수명으로 참조
		클래스 변수는 외부에서 바로 접근 가능
		static 변수는 외부에서 바로 접근하는 것을 방지
		static 변수는 클래스 내부에서만 접근하도록 하려는 의도

8장 예외처리

1절. 예외처리
	예외가 날 가능성이 있는 부분에 대해 미리 예상하고, 그에 대한 처리를 프로그래밍하는 것
	 (이유 : 좀 더 안정적으로 실행)
		ex1. 파일을 다룰 때 : 파일이 없거나, 쓰기 금지로 인한 오류
		ex2. 데이터베이스 프로그래밍 시 제약조건 등으로 
		      CRUD(CREATE, READ, UPDATE, DELETE) 오류
		ex3. 네트워크 프로그래밍 시 일시적인 네트워크 장애시 연결 실패 오류
		ex4. 리스트나 튜플의 인덱스를 벗어난 오류

2절 try ~ except 로 예외처리
	```
	try :
    		예외가 발생할 수도 있는 문장들
	except 예외타입1 :
    		해당 예외가 발생할 경우 실행할 문장
	except 예외타입2 :
    		해당 예외가 발생할 경우 실행할 문장
	except Exception :  # except절이 많은 경우 하위 클래스(자식클래스)가 위에 나와야 한다
    		그 외 예외가 발생할 경우 실행할 문장
	```

	예외메세지(예외인수)
		try:
    			예외가 발생할 수도 있는 구문    
		except [예외타입 as e]:
    			예외가 발생되면 수행할 구문
		else:
    			try절을 수행하다 예외가 발생 안되면 else절을 한번 수행
		finally:
    			예외가 발생 안 하면 try-else-finally절 수행
    			예외가 발생하면 try수행 중 except - finally절 수행

3절 raise : 강제 예외 발생
	사용자 정의 예외 : Exception 클래스 또는 그 하위 클래스를 상속받아 구현
	중첩루프 탈출에 이용

4절 추상클래스
	추상클래스 : 객체를 생성할 수 없는 클래스. 상속받을 클래스의 포맷 제공
	추상메소드 : 호출할 수 없는 메소드

5절 파일 정리 작업 (with절 이용)
	with절 이후에는 자동 close()실행
	with open('열 문서의 위치', '모드') as f :
    		print(f.read())