11장 데이터프레임과 시리즈(Pandas)

2절 데이터 프레임 만들기
	패키지에서 가져오기 : iris 데이터
		방법 1 : sklearn (머신러닝 패키지)
			sklearn : 머신러닝 패키지 (전처리 함수, 머신러닝 함수, 성능평가를 위한 함수, 학습데이터 셋)
			from sklearn import datasets
		방법 2 : statsmodels (R 데이터)
			from statsmodels.datasets import get_rdataset
			get_rdataset('iris',
                            		    package = 'datasets',  (R의 datasets 패키지에서 가져오기)
                            		    cache = True)  (한번 다운로드한 데이터셋을 PC에 저장)
			R 데이터의 경우 변수이름에 '.', ' '이 들어갈 수 있어서 파이썬에서 쓸 때 바꿔줘야 한다
		방법 3 : seaborn (시각화 패키지)
			import seaborn as sns
			iris.to_csv('data/ch11_iris.csv',
           				# sep = ',', encoding = 'utf-8',  # 기본값
           				index = False)  (행이름을 제외하고 파일 출력)
			데이터 프레임을 압축파일(.zip, .gz, .bz2)로
			iris.to_csv('data/ch11_iris.gz', 
            			 index = False,
            			 compression = 'infer')

3절 이름(열, 행)지정하기
	열이름 지정하기 : .columns = ['', '', ...]
	행이름 지정하기 : .index = range(숫자, 숫자)
		           .index = ['', '', ...]
		          되돌리기 : .reset_index(inplace = True)
		          시리즈(날짜형).dt : datetime열의 날짜 및 시간에 관련된 정보만 추출
	레벨 이름 지정하기 : .columns.names = ['', '', ...]
			  .index.names = ['', '', ...]

4절 부분 데이터 조회
	열 조회 ex. 1차원 : member['Name'], member.Name
		  2차원 : member[['Name', 'Email']]
	데이터프레임의 부분 데이터 조회 방법
		df[열이름] - 특정 열 모든 행조회
		df[조건] - 조건에 맞는 모든 행 조회
		df.loc[행이름, 열이름] : 이름조회, 조건(행이름 자리)으로 조회 가능
			열이름을 생략하면 모든 열
			행이름, 열이름 자리에 list, 슬라이싱
		df.iloc[행번호, 열번호] : 번호 조회
			열번호를 생략하면 모든 열
			행번호, 열번호 자리에 list, 슬라이싱
		※ inplace = True : 바꾼 데이터를 적용

5절 데이터 추가 및 삭제
	데이터 프레임의 요소 삭제
		df.drop(행이름이나 열이름, axis) : axis=0 : 행삭제 / axis=1 : 열삭제
		(1) 단일행 삭제 : 문자  ex. member.drop('중')
		(2) 복수행 삭제 : 리스트  ex. member.drop(['Age', 'Birth'], axis = 1)
		(3) 열 삭제 : 단일 → 문자, 복수 → 리스트  
			ex. member.drop(labels = ['Age', 'Birth'], axis = 1)
	데이터프레임의 요소 추가
		열 추가 방법 1 : 공통된 값으로 추가  ex. member['favarite_no'] = 7
		열 추가 방법 2 : 리스트로 추가  ex. member['fn'] = [7, 7, 7, None, 7]
		열 추가 방법 3 : 시리즈로 추가 (데이터 갯수가 부족하면 나머지는 결측치)
			ex. member['fn2'] = pd.Series([7, 7, 7])
		행 추가시 추가할 데이터를 데이터프레임 → 기존 DF, 추가할 DF 연결
			ex. member = pd.concat([member, new_member])  axis = 0 : 행연결, axis =1 : 열연결

6절 병합과 연결
	merge()를 이용한 병합
		df1.merge(df2) : how = 'inner' (기본) : 양쪽 다 일치하는 데이터만 남김
		df1.merge(right = df2, how = 'left') : left 데이터가 기준으로 right 데이터는 매칭되는 것만 병합
		df1.merge(right = df2, how = 'right') : right 데이터가 기준으로 left 데이터는 매칭되는 것만 병합
		df1.merge(df2, how = 'outer') : 양쪽 데이터를 모두 남김
		df3.merge(df4, left_index = True, right_index = True) → pd.concat([df3, df4],1)이랑 유사
	concat()을 이용한 연결
		pd.concat([df1, df2], axis)
		axis = 0 (기본값) : 위아래로 연결
			ex. pd.concat([df1, df2], axis = 0).reset_index(drop = True)
		axis = 1 : 좌우로 연결
			ex. pd.concat([df3, df4], axis = 1).reset_index(drop = True)

7절 정렬 (행이름, 열이름, 값에 의한 정렬)
	행이름으로 정렬  # ascending = True 기본값
		member.sort_index(axis = 0)
		member.sort_index(axis = 'rows', inplace = True)
	열이름으로 정렬  # ascending = True 기본값
		member.sort_index(axis = 1)
		member.sort_index(axis = 'columns', inplace = True)
	값에 의한 정렬 (by = 정렬기준이 될 열이름 를 꼭 써줘야 함)  # ascending = True 기본값
		member.sort_values(by = 'Age')  # 'Age'열 데이터 기준으로 오름차순 정렬
		member.sort_values(by = ['Address', 'Age'],
				 ascending = [True, False], 
                   			 inplace = True)