JavaScript

4장 반복문

1. 배열
	어떤 자료형도 배열 요소가 될 수 있음
	배열의 length속성과 push()메서드
	문자열과 배열

2. while 반복문
	while(조건식){
		조건식이 참일 때 계속 실행할 명령문들;
	}

3. do while 반복문
	do{
		최초 한번은 무조건 실행하며 두번째부터는 조건식이 참이면 계속 수행할 명령문들;
	} while(조건식);

4. for 문
	for( ①초기값 ; ②반복할조건 ; ④증감식){
		③ 반복할 명령문들;
	}

5. for in 반복문
	for(변수 in 배열이나 객체){
		반복할 명령문들;
	}

6. for of 반복문
	for(변수 of 배열이나 객체){
		반복할 명령문들;
	}
6. forEach 함수
	배열변수.forEach(function(data, index){
        		첫번째 인덱스부터 끝 인덱스까지 반복할 명령문들;
	});

	forEach(배열변수, function(data, index){
		첫번째 인덱스부터 끝 인덱스까지 반복할 명령문들;
	});

7. 중첩 반복문

8. break 키워드 vs. continue 키워드

5장 함수

1. 익명 함수 : 함수는 코드의 집합을 나타내는 자료형
	var functionVar = function() { }; : 함수 표현식
	var functionVar = () => {}; : 화살표 함수
	매개변수 지정 방법
	() => { . . . } → 매개변수가 없을 경우
	x =>{ . . . } → 매개변수가 한 개인 경우, 소괄호를 생략할 수 있다
	(x, y) => { . . . } → 매개변수가 2개이상인 경우, 소괄호를 생략할 수 없다
	함수 몸체 지정 방법
	x => { return x*x } → single line block
	x => x * x  → 함수 몸체가 한줄의 return 구문이라면 중괄호 생략 가능 
	() => { return { a: 1 }; }
	() => ({ a: 1 })  → 위 표현과 동일하며 객체 반환시 소괄호를 사용한다
	() => {  → multi line block
  		const x = 10;
  		return x * x;
	        };
	익명 함수 생성과 출력 : 이름이 없으므로 변수에 넣어 사용해야 한다

2. 선언적 함수
	function 함수명 ( ) {
	}

3. 매개변수와 리턴값
	function 함수이름(매개변수, 매개변수, 매개변수) {
		함수 코드
		return 리턴값;
	}

4. 매개변수
	자바 스크립트는 함수를 생성할 때 지정한 매개변수보다 많거나 적은 매개변수를 사용하는 것을 허용
	원래 함수에서 선언된 매개변수보다 많게 사용하면 일반적으로 추가된 매개변수는 무시
	함수에서 선언한 매개변수보다 적게 사용하면 지정하지 않는 매개변수는 undefined
	return이 없으면 return값에 undefined

5. 가변 인자 함수 : 매개변수를 선언된 형태와 다르게 사용했을 때, 매개변수를 모두 활용할 수 있는 함수
		매개변수의 개수가 변할 수 있는 함수 ex. Array() 함수
		arguments : 매개변수 배열

6. 내부 함수 : 함수 내부에 선언하는 함수
	내부 함수 사용하는 이유 : 내부 함수를 사용하면 내부 함수가 우선되기에 충돌을 피할 수 있다

7. 콜백함수 : 자바스크립트에서는 함수도 하나의 자료형이므로 매개변수에 넣을 수 있다
	매개변수에 넣어 전달된 함수를 콜백함수라 한다

8. 클로저 : return된 함수
	클로저 함수로 인해 남은 지역 변수는 각각의 클로저 함수의 고유한 변수이다

9. 타이머 함수
	1. setTimeout(function, millisecond) : 일정시간 후 함수를 한번 실행
	2. setInterval(function, millisecond) : 일정시간마다 함수를 반복해서 실행
	3. clearTimeout(id) : setTimeout 중지
	4. clearInterval(id) : setInterval 중지
	자바스크립트 함수 중에 브라우저에 처리를 부탁하는 함수인 타이머 함수는 웹 브라우저가 처리하고 
	처리가 완료되었다는 것을 자바 스크립트에게 알려주는 방식
