JavaScript

6장 객체

1. 객체 개요
	var array = [‘사과’, ‘바나나’, ‘망고’,’딸기’]; (여러가지 변수를 모아놓은 자료형 typeof() 이용시 object)

	var product = {제품명 : ‘7D 건조 망고’, 
		       유형 : ‘당절임’, 
		       성분 : ‘망고, 설탕, 메타중아황산나트륨, 치자황색소’,
		       원산지 : ‘필리핀’
		       };

2. 속성과 메서드
	배열 내부에 있는 값을 요소(element). 객체 내부에 있는 값은 속성(property)
	자바 스크립트에서는 요소와 속성을 구분하지 않고 쓴다
	객체 속성 중 함수형 자료형인 속성을 특별히 메서드라고 부른다
	this 키워드 생략 불가

3. 객체와 반복문
	배열은 단순 for 반복문과 for in 반복문으로 요소에 쉽게 접근
	객체는 단순 for 문은 불가
	for in 반복문을 사용

4. 객체의 속성 추가

5. 속성 제거 : delete 이용

6. 객체와 배열을 사용한 데이터 관리

7. 함수를 사용한 객체 생성


7장 생성자 함수

1. 생성자 함수 개요
	생성자는 객체지향 프로그램에서 객체를 생성할 때 호출되는 단위 메서드를 말함
	function 생성자함수명(속성값들) {
            	...
       	}
      	var 객체명 = new 생성자함수명(속성값들); 
new 키워드로 객체를 생성하므로 생성자함수
생성자 함수로 만든 객체를 객체 또는 인스턴스라 부름
해당 객체가 어떠한 생성자 함수로 생성됐는지 확인할 때 instanceof 키워드를 사용할 수 있다

2. 프로토타입
	일반함수를 사용하여 객체를 만든 것과 생성자함수를 사용하여 객체를 만드는 것의 차이점이 없다
	각 객체를 생성할 때마다 동일한 함수를 계속 생성하게 된다 이러한 문제를 해결하고자 포르토타입을 이용
	프로토타입이란, 생성자 함수로 생성된 객체가 공통으로 가지는 공간

3. new 키워드
	new 키워드로 함수를 호출하면 객체를 위한 공간을 만들고 this 키워드가 해당 공간을 의미
	그렇지 않는 경우, 일반적으로 this 키워드를 사용하면 window 객체를 나타냄
	window 객체에 속성을 추가한 것이 된다


8장 기본객체

1. string 내장함수
	length : 문자열의 길이를 나타냄
	concat(args) : 매개변수로 입력한 문자열을 이어서 리턴
	substring(start, end) : start부터 end까지 문자열을 잘라서 리턴
	substr(start, count) : start부터 count만큼 문자열을 잘라서 리턴
	indexOf(searchString, position) : 앞에서부터 일치하는 문자열의 위치를 리턴
	lastindexOf(searchString, position) : 뒤에서부터 일치하는 문자열의 위치를 리턴
	trim() : space 없애기
	toUpperCase() : 대문자로 전환 
	toLowerCase() : 소문자로 전환
	replace(regExp, replacement) : 맨 처음 regExp를 repalcement로 바뀐 뒤 리턴
	replaceAll(regExp, replacement) : 모든 regExp를 repalcement로 바뀐 뒤 리턴
	match(regExp) : 문자열 내에 regExp가 있는지 확인

2. 정규표현식
	숫자 형식 : /[0-9]/
	영어 형식 : /[a-zA-Z]/
	한글 형식 : /[가-힣ㄱ-ㅎㅏ-ㅣ]/
	특수문자 형식 : /[`~!@#$%^&*()_\-+=\|\\\[\]{}'";:?\/<>,\.]/
	전화번호 형식 : /^[0-9]{2,3}-[0-9]{3,4}-[0-9]{4}$/
	이메일 형식 : /^\w+@[a-zA-Z0-9가-힣]+\.\w+[\.\w]*$/